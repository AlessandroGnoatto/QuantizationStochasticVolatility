package it.univr.quantizedprocess;

import java.util.HashMap;

import it.univr.model.AbstractModel;
import it.univr.normal.quantizer.OneDimensionalGrid;
import it.univr.productquantizer.ProductQuantizer;

public class QuantizedModel {
	
	
private AbstractModel model;
private QuantizedProcessLattice quantizedProcess;
private TransitionProbabilityLattice transitionProbabilityLattice;

public QuantizedModel(QuantizedProcessLattice quantizedProcess,
                      TransitionProbabilityLattice transitionProbabilityLattice,
                      AbstractModel model) {
	
	this.model = model;
	this.quantizedProcess = quantizedProcess;
	this.transitionProbabilityLattice = transitionProbabilityLattice;
}		

/**
 * Get the risk free rate of the model.
 * 
 * @return the risk free rate
 */
public double getRiskFreeRate() {
		
	return this.model.getRiskFreeRate();
}

/**
 * Get \Delta.
 * 
 * @return deltaT
 */
public double getDeltaT() {
		
	return this.quantizedProcess.getDeltaT();
}

public AbstractModel getModel() {
	
	return this.model;
	
}

/**
 * Get the number of time step of the discretized process.
 * 
 * @return the number of time steps
 */
public int getNumberOfTimeSteps() {
		
	return this.quantizedProcess.getNumberOfTimeSteps();
}

public ProductQuantizer getProductQuantizer(int timeStep) {
	
	return this.quantizedProcess.getProductQuantizer(timeStep);
}

/**
 * Get the distribution of the product quantizer at the time step
 * of interest.
 * 
 * @param timeStep
 * @return The distribution of the product quantizer
 */
public HashMap<double[], Double> getProductQuantizerDistribution(int timeStep) {
		
	return this.quantizedProcess.getProductQuantizerDistribution(timeStep);
}

public HashMap<Integer, OneDimensionalGrid> getGridSet(int timeStep) {
	
	return this.quantizedProcess.getGridSet(timeStep);
}

/**
 * Get the marginal distribution at the last time step of the specified
 * component of the process.
 * 
 * @param process the component of the process
 * @return HashMap where the keys are the quantizers and the
 * values their companion weights
 */
public HashMap<Double, Double> getMarginalDistributionOf(int process) {
		
	return this.quantizedProcess.getMarginalDistributionOf(process);
}


/**
 * Get the transition probability lattice generated by the process.
 * 
 * @return the transition probability lattice
 */
public double getTransitionProbability(int timeStep, double[] conditionalQuantizer, double[] quantizer) {
		
	return this.transitionProbabilityLattice.getTransitionProbability(timeStep, conditionalQuantizer, quantizer);
	}
}